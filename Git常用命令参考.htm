<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 //EN">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<META name="Generator" content="CHM Editor">
<title>Git常用命令参考</title>
<LINK rel="stylesheet" href="_template.css"></HEAD>
<BODY>
<DIV id="nsbanner">
<DIV id="bannerrow1">
<TABLE class="bannerparthead">
<TR id="hdr">
<TD class="runninghead" nowrap>MTK平台软件编译及客制化方法</TD>
</TR>
</TABLE>
</DIV>
<DIV id="titlerow">
<H1 class="dtH1">MTK官方FAQ列表</H1>
</DIV></DIV>
<DIV ><BR></DIV>
<BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr>
<P>查看、添加、提交、删除、找回，重置修改文件</P>
<P> &nbsp;</P>
<P>git help &lt;command&gt; # 显示command的help</P>
<P> &nbsp;</P>
<P>git show # 显示某次提交的内容 git show $id</P>
<P> &nbsp;</P>
<P>git co -- &lt;file&gt; # 抛弃工作区修改</P>
<P> &nbsp;</P>
<P>git co . # 抛弃工作区修改</P>
<P> &nbsp;</P>
<P>git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</P>
<P> &nbsp;</P>
<P>git add . # 将所有修改过的工作文件提交暂存区</P>
<P> &nbsp;</P>
<P>git rm &lt;file&gt; # 从版本库中删除文件</P>
<P> &nbsp;</P>
<P>git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</P>
<P> &nbsp;</P>
<P>git reset &lt;file&gt; # 从暂存区恢复到工作文件</P>
<P> &nbsp;</P>
<P>git reset -- . # 从暂存区恢复到工作文件</P>
<P> &nbsp;</P>
<P>git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</P>
<P> &nbsp;</P>
<P>git ci &lt;file&gt; git ci . git ci -a # 将git add, git 
rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am "some comments"</P>
<P> &nbsp;</P>
<P>git ci --amend # 修改最后一次提交记录</P>
<P> &nbsp;</P>
<P>git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</P>
<P> &nbsp;</P>
<P>git revert HEAD # 恢复最后一次提交的状态</P>
<P> &nbsp;</P>
<P> 查看文件diff</P>
<P> &nbsp;</P>
<P>git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff</P>
<P> &nbsp;</P>
<P>git diff &lt;$id1&gt; &lt;$id2&gt; # 比较两次提交之间的差异</P>
<P> &nbsp;</P>
<P>git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较</P>
<P> &nbsp;</P>
<P>git diff --staged # 比较暂存区和版本库差异</P>
<P> &nbsp;</P>
<P>git diff --cached # 比较暂存区和版本库差异</P>
<P> &nbsp;</P>
<P>git diff --stat # 仅仅比较统计信息</P>
<P> &nbsp;</P>
<P> 查看提交记录</P>
<P> &nbsp;</P>
<P>git log git log &lt;file&gt; # 查看该文件每次提交记录</P>
<P> &nbsp;</P>
<P>git log -p &lt;file&gt; # 查看每次详细修改内容的diff</P>
<P> &nbsp;</P>
<P>git log -p -2 # 查看最近两次详细修改内容的diff</P>
<P> &nbsp;</P>
<P>git log --stat #查看提交统计信息</P>
<P> &nbsp;</P>
<P> tig</P>
<P> &nbsp;</P>
<P>Mac上可以使用tig代替diff和log，brew install tig</P>
<P> &nbsp;</P>
<P>Git 本地分支管理</P>
<P> &nbsp;</P>
<P> 查看、切换、创建和删除分支</P>
<P> &nbsp;</P>
<P>git br -r # 查看远程分支</P>
<P> &nbsp;</P>
<P>git br &lt;new_branch&gt; # 创建新的分支</P>
<P> &nbsp;</P>
<P>git br -v # 查看各个分支最后提交信息</P>
<P> &nbsp;</P>
<P>git br --merged # 查看已经被合并到当前分支的分支</P>
<P> &nbsp;</P>
<P>git br --no-merged # 查看尚未被合并到当前分支的分支</P>
<P> &nbsp;</P>
<P>git co &lt;branch&gt; # 切换到某个分支</P>
<P> &nbsp;</P>
<P>git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</P>
<P> &nbsp;</P>
<P>git co -b &lt;new_branch&gt; &lt;branch&gt; # 
基于branch创建新的new_branch</P>
<P> &nbsp;</P>
<P>git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</P>
<P> &nbsp;</P>
<P>git co $id -b &lt;new_branch&gt; # 
把某次历史提交记录checkout出来，创建成一个分支</P>
<P> &nbsp;</P>
<P>git br -d &lt;branch&gt; # 删除某个分支</P>
<P> &nbsp;</P>
<P>git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</P>
<P> &nbsp;</P>
<P> &nbsp;分支合并和rebase</P>
<P> &nbsp;</P>
<P>git merge &lt;branch&gt; # 将branch分支合并到当前分支</P>
<P> &nbsp;</P>
<P>git merge origin/master --no-ff # 
不要Fast-Foward合并，这样可以生成merge提交</P>
<P> &nbsp;</P>
<P>git rebase master &lt;branch&gt; # 将master 
rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; 
git co master &amp;&amp; git merge &lt;branch&gt;</P>
<P> &nbsp;</P>
<P>&nbsp;Git补丁管理(方便在多台机器上开发同步时用)</P>
<P> &nbsp;</P>
<P>git diff &gt; ../sync.patch # 生成补丁</P>
<P> &nbsp;</P>
<P>git apply ../sync.patch # 打补丁</P>
<P> &nbsp;</P>
<P>git apply --check ../sync.patch #测试补丁能否成功</P>
<P> &nbsp;</P>
<P> &nbsp;Git暂存管理</P>
<P> &nbsp;</P>
<P>git stash # 暂存</P>
<P> &nbsp;</P>
<P>git stash list # 列所有stash</P>
<P> &nbsp;</P>
<P>git stash apply # 恢复暂存的内容</P>
<P> &nbsp;</P>
<P>git stash drop # 删除暂存区</P>
<P> &nbsp;</P>
<P> Git远程分支管理</P>
<P> &nbsp;</P>
<P>git pull # 抓取远程仓库所有分支更新并合并到本地</P>
<P> &nbsp;</P>
<P>git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</P>
<P> &nbsp;</P>
<P>git fetch origin # 抓取远程仓库更新</P>
<P> &nbsp;</P>
<P>git merge origin/master # 将远程主分支合并到本地当前分支</P>
<P> &nbsp;</P>
<P>git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</P>
<P> &nbsp;</P>
<P>git co -b &lt;local_branch&gt; 
origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</P>
<P> &nbsp;</P>
<P>git push # push所有分支</P>
<P> &nbsp;</P>
<P>git push origin master # 将本地主分支推到远程主分支</P>
<P> &nbsp;</P>
<P>git push -u origin master # 
将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</P>
<P> &nbsp;</P>
<P>git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</P>
<P> &nbsp;</P>
<P>git push origin 
&lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</P>
<P> &nbsp;</P>
<P>git push origin :&lt;remote_branch&gt; #先删除本地分支(git br 
-d &lt;branch&gt;)，然后再push删除远程分支</P>
<P> &nbsp;</P>
<P> Git远程仓库管理</P>
<P> &nbsp;</P>
<P> GitHub</P>
<P> &nbsp;</P>
<P>git remote -v # 查看远程服务器地址和仓库名称</P>
<P> &nbsp;</P>
<P>git remote show origin # 查看远程服务器仓库状态</P>
<P> &nbsp;</P>
<P>git remote add origin git@ github:robbin/robbin_site.git 
# 添加远程仓库地址</P>
<P> &nbsp;</P>
<P>git remote set-url origin git@ 
github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm 
&lt;repository&gt; # 删除远程仓库</P>
<P> &nbsp;</P>
<P> 创建远程仓库</P>
<P> &nbsp;</P>
<P>git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</P>
<P> &nbsp;</P>
<P>scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</P>
<P> &nbsp;</P>
<P>mkdir robbin_site.git &amp;&amp; cd robbin_site.git 
&amp;&amp; git --bare init # 在服务器创建纯仓库</P>
<P> &nbsp;</P>
<P>git remote add origin git@ 
github.com:robbin/robbin_site.git # 设置远程仓库地址</P>
<P> &nbsp;</P>
<P>git push -u origin master # 客户端首次提交</P>
<P> &nbsp;</P>
<P>git push -u origin develop # 
首次将本地develop分支提交到远程develop分支，并且track</P>
<P> &nbsp;</P>
<P>git remote set-head origin master # 
设置远程仓库的HEAD指向master分支</P>
<P> &nbsp;</P>
<P> 也可以命令设置跟踪远程库和本地库</P>
<P> &nbsp;</P>
<P>git branch --set-upstream master origin/master</P>
<P> &nbsp;</P>
<P>git branch --set-upstream develop origin/develop</P>
<P> &nbsp;</P></BLOCKQUOTE>
<P>
<DIV ><HR></DIV>
<P ></P>
<P class=footer>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copyright ©2015 <A href="" target="_blank"> </A>. All Rights Reserved. </P></BODY></HTML>
